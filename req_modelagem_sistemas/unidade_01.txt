////////////// UNIDADE 1 - ASPECTOS DA ENGENHARIA DE SOFTWARE E DA ENGENHARIA DE REQUISITOS /////////////////

Software - Instruções (programa de computador) que, quando executadas, fornecem características, funções e desempenho desejados; Estrutura de dados que possibilitam aos programas manipular informações adequadamente; informação descritiva, tanto na forma impressa quanto na virtual, descrevendo a operação e o uso dos programas;

Software tanto é um produto quanto é um veículo para distribuição do produto.

Tipos de software:
- software de sistema - Conjunto de programas feito para atender outros programas. ex: drivers, software de rede, processadores, compiladores, editores, utilitários para gerenciamento de arquivos

- software de aplicação - programas independentes que solucionam uma necessidade específica de negócio. Aplicações nessa área processam dados comerciais ou técnicos de uma forma que facilite operações comerciais ou tomadas de decisões;

- software de engenharia/científico - ampla variedade de programas de 'calculo em massa' que abrangem astronomia, vulcanologia, análise de estresse automotivo, biologia molecular, análise genética, metereologia, etc;

- software embarcado - residente num produto ou sistema, é utilizado para controlar e implementar características e funções para o usuário e para o próprio sistema; ex: geladeiras, funções digitais de automóveis, ar-condicionado;

- software para linha de produtos - projetado para prover capacidade específica de utilização por muitos clientes diferentes. Software para linha de produtos pode se concentrar em um mercado hermético e limitado ou lidar com o consumidor em massa.

- aplicações web/aplicativos móveis - contempla aplicativos voltados para navegadores e software residente em dispositivos móveis.

- software de inteligência artificial - Faz uso de algoritmos não numéricos para solucionar problemas complexos que não são passíveis de computação ou de análise direta. ex: robótica, sistemas especialistas, redes neurais.

Engenharia de software => Atenção em ter foco na qualidade;

Uma metodologia de processo genérica para engenharia de software compreende 5 atividades:
- comunicação => Antes de qualquer trabalho técnico começar é importante comunicar com os clientes e os envolvidos;
A intenção é entender os objetivos dos envolvidos para o projeto e reunir requisitos que ajudem os recursos e as funções do software
- Planejamento => cria um 'mapa' que ajuda a equipe guiando a sua jornada; este mapa define as tarefas técnicas a serem conduzidas, os riscos prováveis e os recursos que serão necessários, os produtos resultantes e um cronograma de trabalho;
- modelagem => criação de um esboço para que se possa ter a ideia de um todo;
- construção => combina a geração de um código e os testes necessários para ver seus erros;
- entrega => O software é entregue ao cliente, que o avalia e passa um feedback;

Essência da solução de um problema (George Polya) =>
1. Compreender o problema;
2. Planejar uma solução;
3. Executar o plano;
4. Examinar o resutado para ter precisão;

7 princípios gerais (david hooker) => 
1 - razão de existir
2 - KISS (keep it simple stupid)
3 - matenha a visão;
4 - o que um produz outros consomem;
5 - esteja aberto ao futuro;
6 - planeje com antecedencia, visando a reutilização;
7 - pense;


//////////////////////////////////// Aula 2 ////////////////////////////////////////////////////////

estrutura do processo de software

Processo => Conjunto de atividades de trabalho, ações e tarefas realizadas quando algum aterfato de software deve ser criado.

Uma metodologia de processo genérica para engenharia de software compreende 5 atividades:

Comunicação;
Planejamento;
Modelagem;
Construção;
Entrega;

O fluxo de processo de software descreve como são organizadas as atividades metodológicas, bem como as ações e tarefas que ocorrem dentro de cada atividade em relação à sequencia e ao tempo

- Fluxo linear => Executa cada uma das cinco atividades em sequência;
    comunicação -> planejamento -> modelagem -> construção -> entrega
- Fluxo iterativo => Repete uma ou mais atividade antes de seguir para a seguinte;
    comunicação <-> planejamento <-> modelagem <-> construção -> entrega
    OBS: Também pode-se ir de modelagem para comunicação, pode repetir-se, pode ir de construção para comunicação/ planejamento; etc....
- Fluxo de processo evolucionário => executa as ativades de forma circular, cada volta pelas cinco atividades conduz uma versão mais completa do software;
    comunicação -> planejamento -> modelagem -> construção -> entrega -> comunicação -> planejamento -> .......
- Fluxo de processo paralelo => executa uma ou mais atividades em paralelo com as outras;
    Difícil de apresentar aqui por arquivo .txt kkkkk, mas a ideia é exatamente essa que uma atividade pode ser executada ao mesmo tempo que outra;

Modelos de cilco de vida de software:

MODELO CASCATA - sugere uma abordagem sequencial e sistemática para o desenvolvimento de software:
    comunicação (especificação dos requisitos do cliente) -> planejamento (estimativas, cronograma) -> modelagem (análise, projeto) -> construção (código, testes) -> entrega (disponibilização)

    Um dos modeloas mais antigos, e ainda um dos mais usados;
    Fixa pontos específicos para a entrega de artefatos;
    simples e facil de aplicar;
    pressupõe que os requisitos ficarão estáveis, logo, qualquer mudança durante o curso do projeto acarretaria em problemas para a continuação do projeto;
    atrasa a redução de riscos;

MODELO EM 'V' - O modelo em V começa com:
    Modelagem de requisitos -> projeto de arquitetura -> projeto de componente -> geração de código;
    Ao terminar o código, começa-se os testes, meio que de trás de frente;
    Teste de unidade -> Vai testar a geração de código;
    Teste de integração -> vai testar o projeto de componente;
    Teste de sistema -> testa o projeto de arquitetura;
    teste de aceitação -> testa se o sistema está de acordo com a modelagem de requisitos;

MODELO INCREMENTAL - Combina os fluxos de processo linear e paralelo dos elementos; Aplica sequencias lineares de forma escalonada, à medida que o tempo vai avançando;
    incremento nº 1 -> ... -> .... -> .... -> Entrega do incremento 1
        incremento nº 2 -> ... -> .... -> .... -> Entrega do incremento 2
            incremento nº 3 -> ... -> .... -> .... -> Entrega do incremento 3
    _______________________________________________________________________> Cronograma do projeto


    Testes e integração são realizados desde o início, de forma contínua;
    Permite feedback dos usuáriso desde cedo
    Foco em curto prazo;
    Implementações parciais podem ser implantadas;
    Antecipa a resolução de riscos;

MODELO EVOLUCIONÁRIO - São iterativos, apresentam características que possibilitam desenvolver versões cada vez mais completas do software; Os modelos mais comuns são: Prototipação e modelo espiral;
    Adaptam-se bem às mudanças e incertezas sobre os requisitos do software;
    A cada nova iteração, o produto evolui;

    MODELO ESPIRAL - 
        Foi criado visando abranger as melhores características do modelo clássico e da prototipagem;
        A cada ciclo do espiral, versões progressivamente mais completas do software são construídas;
        Antes de cada ciclo, uma análise de riscos é feita;
        Ao fim de cada ciclo é feita uma avaliação se deve-se prosseguir para o próximo ciclo;

    PROTOTIPAÇÃO -
        Utilizado quando são muitas incertezas sobre a solução a ser criada, assim o protótipo podem ser descartáveis;
        Devem reutilizar componentes e ferramentas para produção rápida;
        Foca na produção de algo a ser apresentado para os stakeholders;
        Protótipos contribuem para melhorar a qualidade da especificação dos futuros programas, o que leva à diminuição dos gastos com manutenção;
        O treinamento dos usuários pode ser feito antes do produto ficar pronto;
        Partes do protótipo podem ser usadas no desenvolvimento do sistema final;

        Em geral, o grande argumento contra a construção do protótipo é o custo;

MODELOS CONCORRENTES - possibilita a equipe de software representar elementos concorrentes e iterativos de qualquer um dos modelos de proceso já descritos;

///////////// Avaliação e aperfeiçoamento de processos //////////

Não foi dado, não vai cair, estudar mesmo assim depois

////////////////////////////////////////////////////

////////////// Requisitos e modelagem de sistemas /////////

Engenharia de requisitos -> Uma ação de engenharia de software importante que se inicia durante a atividade de comunicação e continua na modelagem; Deve ser adaptada às necessidades do processo, do projeto, do produto e das pessoas que estão realizando o trabalho; O processo de descoberta, análise, documentação e conferência desses serviços e restrições é chamado de engenharia de requisitos;

A egenharia de requisitos abrange 7 tarefas distintas:
- concepção => é estabelecido um entendimento básico do problema, as pessoas que querem uma solução, a natureza da solução deseja e a eficácia da comunicação e colaboração preliminares entre os demais envolvidos e a equipe de software;
- levantamento => Perguntar ao cliente, aos usuários e aos demais envolvidos quais são os objetivos para o sistema ou produto, o que deve ser obtido, como o sistema ou protudo atende às necessidades da empresa e, como o sistema ou produto deve ser utilizado no dia a dia;
    Uma parte importante do levantamento é estabelecer metas de negócios;
- elaboração => é guiada pela criação e pelo refinamento de cenários que descrevem como o usuário vão interagir com o sistema;
- negociação => conciliação de conflitos;
- especificação => pode ser um documento por escrito, um conjunto de modelos gráficos, um modelo matemático forma, um conjunto de cenários de uso, um protótipo ou qualquer combinação dos fatores citados;
- validação => examina a especificação para garantir que todos os requisitos de software tenham sido declarados de forma não ambígua; que as inconsistências, omissões e erros tenham sido detectados e corrigidos; e que os artefatos estejam de acordo com os padrões estabelecidos para o processo, projeto e produto;
- gestão => conjunto de atividades que ajuda a equipe de projeto a identificar, controlar e acompanhar as necessidades e suas mudanças à medida que o projeto prossegue;


REQUISITO - Requisitos de um sistema são as descrições dos serviços que o sistema deve prestar e as restrições a sua operação; Esses requisitos refletem as necessidades dos clientes de um sistema que atende a um determinado propósito, como controlar um dispositivo, fazer um pedido ou encontrar informações;
    Em alguns casos, um requisito é simplesmente uma declaração abstrata de alto nível de um serviço que um sistema deve oferecer ou de uma restrição a um sistema;
    Por outro lado, é uma definição formal detalhada de uma função do sistema;

    Requisito pode ser:
        Uma declaração abstrata de alto nível de um serviço;
        Uma restrição do sistema;
        Uma especificação funcional matemática detalhada;

Requisitos funcionais - 
Requisitos não funcionais - 

Requisitos do usuário - são declarações, em uma linguagem natural somada a diagramas, dos serviços que se espera que o sistema forneça para os usuários e das limitações sob as quais ele deve operar; Esses requisitos podem variar de declarações ampas das características necessárias do sistema até descrições precisas e detalhadas da sua funcionalidade;
Requisitos do sistema - são descrições mais detalhadas das funções, dos serviços e das restrições operacionais do sistema de software. O documento de requisitos de sistema (chamado às vezes de especificação funcional) deve definir exatamente o que deve ser implementado. Pode fazer parte do contrato entre o adquirente do sistema e os desenvolvedores do software;

Renato Bontempo



























