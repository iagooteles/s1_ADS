////////////// UNIDADE 1 - ASPECTOS DA ENGENHARIA DE SOFTWARE E DA ENGENHARIA DE REQUISITOS /////////////////

Software - Instruções (programa de computador) que, quando executadas, fornecem características, funções e desempenho desejados; Estrutura de dados que possibilitam aos programas manipular informações adequadamente; informação descritiva, tanto na forma impressa quanto na virtual, descrevendo a operação e o uso dos programas;

Software tanto é um produto quanto é um veículo para distribuição do produto.

Tipos de software:
- software de sistema - Conjunto de programas feito para atender outros programas. ex: drivers, software de rede, processadores, compiladores, editores, utilitários para gerenciamento de arquivos

- software de aplicação - programas independentes que solucionam uma necessidade específica de negócio. Aplicações nessa área processam dados comerciais ou técnicos de uma forma que facilite operações comerciais ou tomadas de decisões;

- software de engenharia/científico - ampla variedade de programas de 'calculo em massa' que abrangem astronomia, vulcanologia, análise de estresse automotivo, biologia molecular, análise genética, metereologia, etc;

- software embarcado - residente num produto ou sistema, é utilizado para controlar e implementar características e funções para o usuário e para o próprio sistema; ex: geladeiras, funções digitais de automóveis, ar-condicionado;

- software para linha de produtos - projetado para prover capacidade específica de utilização por muitos clientes diferentes. Software para linha de produtos pode se concentrar em um mercado hermético e limitado ou lidar com o consumidor em massa.

- aplicações web/aplicativos móveis - contempla aplicativos voltados para navegadores e software residente em dispositivos móveis.

- software de inteligência artificial - Faz uso de algoritmos não numéricos para solucionar problemas complexos que não são passíveis de computação ou de análise direta. ex: robótica, sistemas especialistas, redes neurais.

Engenharia de software => Atenção em ter foco na qualidade;

Uma metodologia de processo genérica para engenharia de software compreende 5 atividades:
- comunicação => Antes de qualquer trabalho técnico começar é importante comunicar com os clientes e os envolvidos;
A intenção é entender os objetivos dos envolvidos para o projeto e reunir requisitos que ajudem os recursos e as funções do software
- Planejamento => cria um 'mapa' que ajuda a equipe guiando a sua jornada; este mapa define as tarefas técnicas a serem conduzidas, os riscos prováveis e os recursos que serão necessários, os produtos resultantes e um cronograma de trabalho;
- modelagem => criação de um esboço para que se possa ter a ideia de um todo;
- construção => combina a geração de um código e os testes necessários para ver seus erros;
- entrega => O software é entregue ao cliente, que o avalia e passa um feedback;

Essência da solução de um problema (George Polya) =>
1. Compreender o problema;
2. Planejar uma solução;
3. Executar o plano;
4. Examinar o resutado para ter precisão;

7 princípios gerais (david hooker) => 
1 - razão de existir
2 - KISS (keep it simple stupid)
3 - matenha a visão;
4 - o que um produz outros consomem;
5 - esteja aberto ao futuro;
6 - planeje com antecedencia, visando a reutilização;
7 - pense;


//////////////////////////////////// Aula 2 ////////////////////////////////////////////////////////

estrutura do processo de software

Processo => Conjunto de atividades de trabalho, ações e tarefas realizadas quando algum aterfato de software deve ser criado.

Uma metodologia de processo genérica para engenharia de software compreende 5 atividades:

Comunicação;
Planejamento;
Modelagem;
Construção;
Entrega;

O fluxo de processo de software descreve como são organizadas as atividades metodológicas, bem como as ações e tarefas que ocorrem dentro de cada atividade em relação à sequencia e ao tempo

- Fluxo linear => Executa cada uma das cinco atividades em sequência;
    comunicação -> planejamento -> modelagem -> construção -> entrega
- Fluxo iterativo => Repete uma ou mais atividade antes de seguir para a seguinte;
    comunicação <-> planejamento <-> modelagem <-> construção -> entrega
    OBS: Também pode-se ir de modelagem para comunicação, pode repetir-se, pode ir de construção para comunicação/ planejamento; etc....
- Fluxo de processo evolucionário => executa as ativades de forma circular, cada volta pelas cinco atividades conduz uma versão mais completa do software;
    comunicação -> planejamento -> modelagem -> construção -> entrega -> comunicação -> planejamento -> .......
- Fluxo de processo paralelo => executa uma ou mais atividades em paralelo com as outras;
    Difícil de apresentar aqui por arquivo .txt kkkkk, mas a ideia é exatamente essa que uma atividade pode ser executada ao mesmo tempo que outra;

Modelos de cilco de vida de software:

MODELO CASCATA - sugere uma abordagem sequencial e sistemática para o desenvolvimento de software:
    comunicação (especificação dos requisitos do cliente) -> planejamento (estimativas, cronograma) -> modelagem (análise, projeto) -> construção (código, testes) -> entrega (disponibilização)

    Um dos modeloas mais antigos, e ainda um dos mais usados;
    Fixa pontos específicos para a entrega de artefatos;
    simples e facil de aplicar;
    pressupõe que os requisitos ficarão estáveis, logo, qualquer mudança durante o curso do projeto acarretaria em problemas para a continuação do projeto;
    atrasa a redução de riscos;

MODELO EM 'V' - O modelo em V começa com:
    Modelagem de requisitos -> projeto de arquitetura -> projeto de componente -> geração de código;
    Ao terminar o código, começa-se os testes, meio que de trás de frente;
    Teste de unidade -> Vai testar a geração de código;
    Teste de integração -> vai testar o projeto de componente;
    Teste de sistema -> testa o projeto de arquitetura;
    teste de aceitação -> testa se o sistema está de acordo com a modelagem de requisitos;

MODELO INCREMENTAL - Combina os fluxos de processo linear e paralelo dos elementos; Aplica sequencias lineares de forma escalonada, à medida que o tempo vai avançando;
    incremento nº 1 -> ... -> .... -> .... -> Entrega do incremento 1
        incremento nº 2 -> ... -> .... -> .... -> Entrega do incremento 2
            incremento nº 3 -> ... -> .... -> .... -> Entrega do incremento 3
    _______________________________________________________________________> Cronograma do projeto


    Testes e integração são realizados desde o início, de forma contínua;
    Permite feedback dos usuáriso desde cedo
    Foco em curto prazo;
    Implementações parciais podem ser implantadas;
    Antecipa a resolução de riscos;

MODELO EVOLUCIONÁRIO - São iterativos, apresentam características que possibilitam desenvolver versões cada vez mais completas do software; Os modelos mais comuns são: Prototipação e modelo espiral;
    Adaptam-se bem às mudanças e incertezas sobre os requisitos do software;
    A cada nova iteração, o produto evolui;

    MODELO ESPIRAL - 
        Foi criado visando abranger as melhores características do modelo clássico e da prototipagem;
        A cada ciclo do espiral, versões progressivamente mais completas do software são construídas;
        Antes de cada ciclo, uma análise de riscos é feita;
        Ao fim de cada ciclo é feita uma avaliação se deve-se prosseguir para o próximo ciclo;

    PROTOTIPAÇÃO - 
        Utilizado quando são muitas incertezas sobre a solução a ser criada, assim o protótipo podem ser descartáveis;
        Devem reutilizar componentes e ferramentas para produção rápida;
        Foca na produção de algo a ser apresentado para os stakeholders;
        Protótipos contribuem para melhorar a qualidade da especificação dos futuros programas, o que leva à diminuição dos gastos com manutenção;
        O treinamento dos usuários pode ser feito antes do produto ficar pronto;
        Partes do protótipo podem ser usadas no desenvolvimento do sistema final;

        Em geral, o grande argumento contra a construção do protótipo é o custo;

MODELOS CONCORRENTES - possibilita a equipe de software representar elementos concorrentes e iterativos de qualquer um dos modelos de proceso já descritos;

///////////// Avaliação e aperfeiçoamento de processos //////////

Não foi dado, não vai cair, estudar mesmo assim depois


//////////// Tipos de requisitos, restrições e premissas, dificuldades comuns em requisitos //////

Do ponto de vista do processo de software, a engenharia de requisitos é uma ação de engenharia de software importante que se inicia durante a atividade de comunicação e continua na de modelagem. 

engenharia de requisitos abrangem 7 tarefas distintas:
- concepção - é estabelecido o entendimento básico do problema, as pessoas que querem uma solução, a natureza da solução desejada e a eficácia da comunicação e a colaboração preliminares entre os demais envolvidos e a equipe de software;
- levantamento - Perguntar ao cliente, aos usuários e aos demais envolvidos quais são os objetivos para o sistema ou produto, o que deve ser obtido, como o sistema ou produto atende às necessidades da empresa e, por fim, como o sistema ou produto deve ser utilizado no dia a dia;
- elaboração - A elaboração é guiada pela criação e pelo refinamento de cenários que descrevem como o usuário (e outros atores) vão interagir com o sistema. Cada cenário de usuário é analisado para extrair classes de análise – entidades do domínio de negócio visíveis para o usuário;
- negociação - É preciso conciliar esses conflitos por meio de um processo de negociação;
- especificação - No contexto de sistemas baseados em computador (e software), o termo especificação assume diferentes significados para diferentes pessoas. Especificação pode ser um documento por escrito, um conjunto de modelos gráficos, um modelo matemático formal, um conjunto de cenários de uso, um protótipo ou qualquer combinação dos fatores citados;
- validação - A validação de requisitos examina a especificação para garantir que todos os requisitos de software tenham sido declarados de forma não ambígua; que as inconsistências, omissões e erros tenham sido detectados e corrigidos; e que os artefatos estejam de acordo com os padrões estabelecidos para o processo, projeto e produto;
- gestão de requisitos - ajuda a equipe de projeto a identificar, controlar e acompanhar as necessidades e suas mudanças à medida que o projeto prossegue;

CLENESVAGE

Requisito => são as descrições dos serviços que um sistema deve operar e suas restrições;
- Em alguns casos, um requisito é simplesmente uma declaração abstrata de alto nível de um serviço que um sistema deve oferecer ou de uma restrição a um sistema;
- No outro extremo, é uma definição formal detalhada de uma função do sistema;

▪ Uma declaração abstrata de alto nível de um serviço
▪ Como uma restrição do sistema
▪ Quanto uma especificação funcional matemática
detalhada

Requisitos funcionais => Declarações dos serviços que o sistema deve oferecer, do modo como o sistema deve reagir a determinadas entradas e de como deve se comportar em determinadas situações.
    Descrevem funcionalidades e serviços do sistema;
    Exemplos:
        1. Um usuário deve poder fazer uma busca na lista de consultas de todas as clínicas.
        2. O sistema deve gerar, a cada dia e para cada clínica, uma lista de pacientes que devam comparecer às consultas naquele dia.
        3. Cada membro da equipe que utiliza o sistema deve ser identificado exclusivamente por seu número de funcionário de oito dígitos.

Requisitos não-funcionais => São restrições sobre os serviços ou funções oferecidas pelo sistema. Se aplicam, frequentemente, ao sistema como um todo, em vez de às características individuais ou aos serviços;
Requisitos não-funcionais são aqueles que não possuem relação direta com os serviços específicos fornecidos pelo sistema aos seus usuários;
Esses requisitos não funcionais normalmente specificam ou restringem as características do sistema como um todo. Eles podem estar relacionados a propriedades emergentes do sistema, como confiabilidade, tempo de resposta e uso da memória.

Requisitos não-funcionais podem ser classificados em:

- Requisitos de produto: Especificam ou restringem o comportamento do software durante a execução;
    Os exemplos incluem requisitos de desempenho, relativos à rapidez com que o sistema deve executar e de quanta memória ele precisa; requisitos de confiabilidade, que estabelecem a taxa de falha aceitável; requisitos de segurança da informação (security): e requisitos de usabilidade.
- Requisitos organizacionais: São requisitos de sistema amplos, derivados das políticas e procedimentos nas organizações do cliente e do desenvolvedor;
    Os exemplos incluem requisitos de processos operacionais, que definem como o sistema será utilizado; requisitos de processos de desenvolvimento, que especificam a linguagem de programação, o ambiente de desenvolvimento ou os padrões de processo a serem utilizados; e os requisitos ambientais, que especificam o ambiente operacional do sistema.
- Requisitos externos: Esse título abrangente cobre todos os requisitos derivados de fatores externos ao sistema e seu processo de desenvolvimento. ;
    Podem incluir requisitos regulatórios, que estabelecem o que deve ser feito para o sistema ser aprovado por uma entidade reguladora, como uma autoridade de segurança nuclear; requisitos legislativos, que devem ser seguidos para garantir que o sistema opere dentro da lei; e requisitos éticos, que garantem que o sistema será aceitável para os usuários e para o público em geral.

Requisito de domínio => é um tipo de requisito que descreve as características e funcionalidades específicas de um sistema relacionadas ao domínio do problema que o software está tentando resolver; Ou seja, ele se refere a aspectos que estão diretamente ligados ao contexto de negócios, processos e regras do ambiente onde o software será utilizado.
    Esses requisitos estão relacionados ao negócio e ao contexto específico em que o sistema será implementado, e são essenciais para garantir que o software atenda às necessidades reais do usuário e esteja alinhado com o setor ou área de atuação.
Exemplos de requisitos de domínio:
    Sistema bancário:
        O sistema deve permitir a transferência de fundos entre contas.
        Deve existir uma validação para impedir transações que ultrapassem o saldo disponível na conta.
    Sistema de locadora de veículos:
        O sistema deve garantir que os carros disponíveis para aluguel estejam em boas condições de funcionamento.
        Um cliente não pode alugar mais de um veículo por vez, a não ser que tenha um histórico de bom comportamento como locatário.

Características de um requisito de domínio:
    Específico ao contexto: Refere-se diretamente ao tipo de negócio ou área em que o sistema será utilizado.
    Regulamentado por regras de negócios: Está geralmente vinculado a regras ou leis do setor em questão, como leis financeiras, normas de segurança, etc.
    Determinante para a entrega de valor: Esse tipo de requisito tem um impacto direto na entrega de valor do software, pois garante que ele seja útil para os usuários no seu contexto específico.

Regras de negócio => Trás uma decisão ; Existem regras que regem interações; As regras são capturadas na modelagem de negócio ou no levantamento de requisitos;
    ex: cálculo do preço de aluguel de uma cópia; lançamento; promoção;

Regras de negócio trazem uma decisão; Requisitos trazem um comportamento;

* Vai cair regras de negócio na prova *


///////////////////////////// Critérios de qualidade de requisitos ////////////////////////////////////

▪ O que é a qualidade de requisitos?

Qualidade é cumprir com os requisitos;
Para se ter uma boa especificação de requisitos é necessário ajudar os clientes a descreverem com exatidão o que desejam obter, além disso, é necessário ajudar os devs a entenderem o que os clientes querem;

▪ Aspectos de qualidade dos requisitos

A validação deve ser realizada utilizando-se dos 3 objetivos de qualidade a seguir:
    - Conteúdo - ;
    - Documentação - ;
    - Acordo - ;

▪ Os critérios de qualidade da IEEE 830

- Correta       : Cada requisito satisfaz ao menos uma necessidade ou demanda legítima do negócio; não contém requisitos supérfluos;
- Completa      : Todos os elementos significativos do contexto de interesse estão descritos;
- Clara         : Possui uma única interpretação para todo o público alvo; use exemplos; 
- Consistente   : Não existem contradições entre os documentos de requisitos, seja no mesmo nível ou em níveis diferentes;
- Modificável   : Modificações podem ser feitas de maneira fácil, completa e Consistente sem comprometer a sua estrutura e estilo; Não seja redundante;
- Priorizada    : Cada requisito tem atribuído um valor de importância relativa baseado em um ou mais critérios. por exemplo: risco, valor para o negócio, custo; Uma boa priorização assegura que o esforço será focado nos requisitos mais críticos, reduzindo assim riscos do projeto;
- Verificável   : Também chamada de 'testável'; Há um método para demonstrar que a solução satisfaz cada requisito;
- Rastreável    : Estabelece relação entre requisitos, suas origens e produtos derivados; Torna a especificação mais modificável, mas fácil de verificar se está correta e completa, além de facilitar a análise de impacto das mudanças;


▪ Onde estes critérios são aplicados?
- Na própria elaboração da especificação, pois servem como um referencial para o analista de requisitos.
- E principalmente nas atividades de verificação e validação de requisitos, que têm como foco garantir a qualidade do trabalho de requisitos.


Exercícios:

No modelo de desenvolvimento Waterfall, a partir da coleta de requisitos e da elaboração do projeto desenvolve-se uma implementação inicial, que é apresentada para a apreciação dos usuários; esse ciclo continua com a criação de várias versões, até que o sistema final seja desenvolvido por meio da execução das etapas de desenvolvimento e testes de forma intercalada.
    Falso 

Os casos de uso podem ser considerados uma técnica de descoberta de requisitos; eles são documentados por um diagrama de casos de uso de alto nível, no qual se descrevem os atores — pessoas ou outros sistemas — e as interações do sistema.
    Verdadeiro 

A validação de requisitos é o processo pelo qual se verifica a qualidade dos artefatos produzidos durante a engenharia de requisitos. Nessa etapa, busca-se identificar e corrigir ambiguidades, inconsistências, omissões e erros. Sobre a etapa de validação descrita, é correto afirmar que:
    Uma das questões a ser verificada é o uso de padrões de requisitos.

Liste 3 problemas que podem ocorrer durante o processo de análise de requisitos, justifique sua resposta
    Mudanças nos requisitos depois que eles já foram definidos: Os requisitos podem ser mudados durante o processo de desenvolvimento. Clientes ou stakeholders, ao mudarem os requisitos, podem gerar mais trabalho ou invalidar um trabalho já feito, o que causa atrasos no projeto;

    Requisitos inviáveis, incompletos ou inconsistentes: Quando o cliente não sabe justificar ou explicar de forma clara o seu requisito, isso pode fazer com que a funcionalidade do sistema não esteja de acordo com o que os stakeholders queriam;
    e/ou
    Falha de comunicação: A comunicação falha entre a equipe e o cliente pode levar a mal-entendidos e gerar requisitos mal definidos, fazendo que as funcionalidades do sistema não seja de acordo com o que seria idealizado pelo cliente;

    Equívoco na priorização de requisitos: Priorizar os requisitos de forma errada pode fazer com que o desenvolvimento foque em funcionalidades menos importantes enquanto requisitos críticos ao sistema são deixados de lado;

O tempo médio de falha, probabilidade de indisponibilidade e taxa de ocorrência de falhas são métricas para especificar propriedades de requisitos
    não funcionais

Suponha que você foi contratado para projetar um editor de documentos elaborados colaborativamente por usuários distribuídos e que estão usando computação móvel. Há dois tipos de usuários: usuários que editam o documento, e usuários que leem o documento, mas não podem editá-lo. Todos se comunicam por voz num padrão par a par. É possível enviar notificação para iniciar uma colaboração e ao aceitar o convite a comunicação de voz é iniciada. Os documentos gerados por meio colaborativo podem ter controle de versionamento, além de ser possível realizar a exportação em formato PDF para impressão que deve ser montado através de um serviço provido por uma .lib. O cliente gostaria que o layout do sistema se adaptasse conforme o modelo do aparelho móvel utilizado para que o estilo seja visualizado a representação do fabricante para que o usuário não tenha problemas com a experiência de uso de acordo com o sistema operacional do aparelho. Apenas os usuários que estiverem envolvidos nessa colaboração podem ter acesso ao documento. O usuário que edita o documento pode convidar quantos colabores desejar, e apenas o usuário que criou o documento pode definir o perfil desse colaborador (se usuário ou editor). Caso exista um problema de conexão o sistema deve salvar automaticamente as edições realizadas anteriormente. Todas as comunicações devem ser gravadas e devem ser possível acessá-las para consultas posteriores. Identifique e liste os requisitos funcionais e não funcionais relacionados ao hardware desse sistema. 

Liste pelo menos 3 requisitos funcionais e 3 requisito não-funcionais

    3 requisitos funcionais:

        Há dois tipos de usuários: usuários que editam o documento, e usuários que leem o documento, mas não podem editá-lo;
        Todos se comunicam por voz num padrão par a par;
        É possível enviar notificação para iniciar uma colaboração e ao aceitar o convite a comunicação de voz é iniciada;
        Os documentos gerados por meio colaborativo podem ter controle de versionamento;
        Além de ser possível realizar a exportação em formato PDF para impressão;
        Apenas os usuários que estiverem envolvidos nessa colaboração podem ter acesso ao documento;
        O usuário que edita o documento pode convidar quantos colabores desejar, e apenas o usuário que criou o documento pode definir o perfil desse colaborador (se usuário ou editor);
        Caso exista um problema de conexão o sistema deve salvar automaticamente as edições realizadas anteriormente;
        Todas as comunicações devem ser gravadas e devem ser possível acessá-las para consultas posteriores

    3 requisito não-funcionais:
        Que deve ser montado através de um serviço provido por uma .lib;
        O cliente gostaria que o layout do sistema se adaptasse conforme o modelo do aparelho móvel utilizado para que o estilo seja visualizado a representação do fabricante para que o usuário não tenha problemas com a experiência de uso de acordo com o sistema operacional do aparelho;
        Todas as comunicações devem ser gravadas e devem ser possível acessá-las para consultas posteriores; => OBS: Apesar de listar um requisito funcional (O que o istema deve fazer), aqui também é descrito que o sistema deve salvar essas comunicações para que elas sejam consultadas posteriormente, logo como o sistema vai salvar essas comunicações seria um requisito não funcional;

Quais são os níveis de detalhamento que os requisitos precisam atender?
    Sistema e Usuário.

Quais as principais diferenças entre o MPS.BR e o CMMI?

    Ambos são modelos de referência para melhoria em processos de software:
    MPS.BR:
        Melhoria Processo Software BRasil - Criado no Brasil - Proporciana um modelo de melhoria voltado ao mercado brasileiro;
        Apresenta uma estrutura mais simplificada e flexível, permitindo a adaptação para diferentes tamanhos e tipos de empresas;
        O modelo busca resultados rápidos e tem os objetivos claros;
        Tem o foco em empresas de pequeno e médio porte;
        Tem o custo mais acessível e é menos exigente em termos de alocação de recursos;

    CMMI:
        Capability Maturity Model Integration - Modelo de melhoria que ajuda empresas a analisar e aprimorar a sua qualidade e eficiência de seus processos; 
        Seu objetivo é analisar, corrigir e implementar soluções;
        Ajuda a melhorar a capacidade de desenvolvimento de produtos e serviços;
        Sua abordagem é mais rigorosa, com implementação mais estruturada e detalhada;
        Sua implementação é mais comum em grandes organizações e empresas complexas;
        Custo normalmente elevado, tanto para implementação quanto para certificação;

O que é um modelo de maturidade?
    Um modelo de maturidade é uma estrutura ou conjunto de práticas e processos que descrevem os estágios de evolução e aprimoramento de uma organização ou processo em determinado domínio. Ele define as etapas que uma organização percorre para atingir um nível de desempenho otimizado e, geralmente, estabelece uma série de níveis de maturidade que a organização pode alcançar à medida que melhora suas práticas;


Segundo Pressman (2006) o software estão categorizados nos seguintes tipos, considere V para afirmativa verdadeira e F para falsa:
( ) Software de inteligência artificial - São softwares que fazem os usos de algoritmos numéricos. Estes tipos software se encaixam na robótica. 
( ) Software de aplicação - São programas que são desenvolvidos para executar no negócio de uma empresa determinada. 
( ) Software científico e de engenharia - São algoritmos que processam números. 
( ) Computação ubíqua - São softwares que realizam a verdadeira computação concentrada. 
( ) Software aberto - São softwares que disponibilizam a visualização do código fonte da aplicação para o engenheiro de software modificar da maneira que deseja.

A sequência correta, de cima para baixo, é:
    F, V, V, F, V.

Explique com suas palavras como funciona um modelo de ciclo de vida tradicional, e qual a principal situação não é indicada como escolha de um desenvolvimento de software. Justifique sua resposta. 

    Esse modelo também é conhecido como modelo cascata, ele segue uma sequência linear e tem suas fases bem definidas, sendo necessário concluir uma fase para poder se iniciar a próxima.

    Esse modelo não é indicado quando há inseguranças em relação aos seus requisitos ou quando o sistema necessita de mudanças com frequência durante o seu desenvolvimento. Isso acontece justamente porque este modelo precisa de requisitos bem definidos, pois eles são seguidos de forma rígida, já que é necessário concluir uma fase para se iniciar a próxima. Esse modelo não reage bem à mudanças diferentemente de um modelo ágil que pode ter os requisitos mudados ou reanalizados a qualquer momento;












