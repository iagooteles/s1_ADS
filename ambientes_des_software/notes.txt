<<<<<<< HEAD
=======
/////////// Aula 1 ///////////

Software:
- Web: 
- Mobile: 
- Cloud: 
- Embarcado: 

Software não é patentiável, ele recebe um registro;

Componentização => 'Quebrar' o código em partes menores para reproveitar o código e para evitar que ele tenha que ser escrito várias vezes e respeitar o princípio DRY - Don't Repeat Yourself -;


//////////////////////// Aula 2 //////////////////////

Seletores css:
- nativos/tag - Por tipo de tag;
- classe - Para todos que tiverem aquela classe;
- ID - Identificador único;

HTML => HyperText Markup Language => Definir a estrutura da página;
CSS => Cascading Style Sheets => Definir aparência;
JS => Definir funções, comandos e dinamismo da página;

Mobile first => Desenvolver o sistema/website pensando na estrutura de se criar o projeto mobile primeiro, sempre levando em consideração a responsividade;

Responsividade => Capacidade do sistema se adaptar para diferentes tamanhos de tela;

frameworks => É uma estrutura mais abrangente e geralmente mais opinativa, que fornece uma base para o desenvolvimento de um projeto. Ele dita a arquitetura do seu código e estabelece uma série de regras, convenções e padrões que o desenvolvedor deve seguir.

bibliotecas => É uma coleção de funções, métodos e recursos que o programador pode utilizar para realizar tarefas específicas em seu código. Ela oferece soluções para problemas comuns, como manipulação de strings, acesso a banco de dados, ou geração de gráficos.

Biblioteca: Você chama a biblioteca no seu código quando precisar de suas funcionalidades, controlando o fluxo.
Framework: O framework chama o seu código, controlando o fluxo e fornecendo uma estrutura predefinida que você segue.

Biblioteca é como um conjunto de ferramentas que você usa quando precisa delas.
Framework é como uma receita de bolo, onde você segue um passo a passo para conseguir o resultado final.


////////////// Des mobile ///////////////

Desenvolvimento nativos - 
    para desenvolver ANDROID nativo é necessário um ambiente com SDK e android studio, normalmente apps Android são desenvolvidos com Kotlin, mas já foram desenvolvidos com JAVA, o android studio gera um APK- executável - e é necessário AAB(android app bundle)- não executável - para colocar na loja;

    Para desenvolver IOS - só é possível com um MAC, sua linguagem padrão é SWIFT, ele já vem com IDE própria => XCODE; O artefato gerado aqui é o .ipa

    Benefícios do desenvolvimento nativo => 
        - maior desempenho;
        - Acesso direto aos recursos dos dispositivos (camera, gps, acelerômentro)
        - user experience: aproveitamento de recursos e padrões nativos.
        

Desenvolvimento híbrido - possibilita o desenvolvimento de um só código que vai ser compilado e distribuído para cada sistema operacional; Na hora do build, o código faz um build para IOS e outro para ANDROID;
    OBS: Você não precisa de um MAC para codificar, mas na hora do build é necessário um mac para gerar o arquivo .ipa

    ex: react native(javascript, typescript), flutter(dart), ionic;

    alguns modelos híbridos podem, ainda, além da forma nativa, trabalhar com modelo WEBVIEW que vai passar sua aplicação como se fosse uma espécie de browser que vai ler a aplicação como se fosse html, css, js;

BUILD => Processo de construção da aplicação;
Em termos gerais uma equipe que desenvolve hibridamente é mais barato que ter uma equipe que desenvolva nativo (a nativo teria que fazer dois códigos diferentes para o mesmo aplicativo);


Javascript é uma linguagem Fraca e Dinâmica (dinâmica pq na hora que o código for executado é que o tipo vai ser definido) ** revisar se isso ta certo mesmo;

Dinâmica => O tipo das variáveis são definidos no tempo de Execução; ex: js,  python, rubym php;
Estática => O tipo das variáveis são definidos no tempo de Compilação; ex: java, C++, swift, C#; 
Fraca => Permite fazer operações com tipos diferentes; ex: js, php, perl, C, Lua; 
Forte =>  Não permite fazer operações com tipos diferentes; ex: java, python, swift;

Compilação =>

//////////////////////////////////  ////////////////////////////////////

Paradigmas de programação => Cada paradigma fornece uma forma diferente de pensar sobre problemas comtacionais e estruturar soluções; Cada paradigma possui seus princípios, regras e técnicas;

- paradigma imperativo => um dos mais antigos;  baseia-se na execução de comandos seqüenciais; comandos que alteram o estado do sistema; Programas são escritos em uma série de instruções que devem ser executadas em ordem;
- paradigma funcional => avaliação de funções e dados mutáveis; É frequentemente utilizado para tratar de problemas matemáticos e processamento de listas; Um benefício imenso desse paradigma é deixar o software modular e reutilizável;
- paradigma declarativo => Permite que os usuários interagem com banco de dados relacionais; 
- paradigma orientado a objetos => Promove modularidade e reutilização; Organiza o software ao redor de objetos que são instanciados através de classes;
    - Abstração;
    - herança;
    - encapsulamento;
    - polimorfismo;

/////////////////////// GIT /////////////////////

Controle de versão => 

alpha => teste fechado;
1 . 0 . 0 => Versão Beta;
1 . 12 . 7

primero numero  - major => incompatibilidade; Rebirth; (Pode ser de mudanças de cunho arquitetural da aplicação, ou pode ser de cunho de negócios, por exemplo, uma nova interface.)
segundo numero  - minor => novas funcionalidades; Features;
terceiro número - patch => correção de bugs; Erros;

minor zera a patch;
major zera a minor e a patch;

Git flow => 
Branch main => O objetivo da branch main é armazenar código estável;
    É uma branch permanente;
    Não é o ambiente de trabalho de desenvolvedor;
Branch dev(senvolvimeto)  => Serve para armazenamento e coloca-se lá o que foi desenvolvido;
    É uma branch permanente;
    Não é o ambiente de trabalho de desenvolvedor;
Branch prod(ução) => 
Branch bugfix => Onde se é trabalhado;
    Serve para corrigir bugs;
Branch hotfix => Utilizadas em questões de emergências;
Branch feature => Adicionar novas funcionalidades;
Branch release => Objetivo de criar uma nova versão;

Para que serve uma branch do git (PROVA) => 
OBs: Registra QUEM, QUANDO e O QUE na publicação da branch;


Alguns comandos úteis git =>
git branch => ver em qual branch está;
git checkout -b (nome da branch) => criar uma nova branch e mudar para ela;
git checkout (nome da branch) => mudar para uma branch já existente;



////////////////////////////////// Criando a branch dev //////////////////////////////////

Antes de criar a branch dev, certifique-se de estar na main:
git checkout main # Vai para a branch main
git pull origin main # Atualiza a branch local com a versão mais
recente do remoto
git checkout -b dev # Cria e muda para a branch dev
git push origin dev # Envia a branch dev para o repositório remoto

////////////////////////////////// Criando a branch bugfix a partir da dev //////////////////////////////////

git checkout dev # Certifique-se de estar na dev
git checkout -b bugfix/nome-da-branch # Cria e muda para a branch
bugfix
git push origin bugfix/nome-da-branch # Envia a nova branch para o
repositório remoto

////////////////////////////////// Merge da bugfix na dev ////////////////////////////////////

Mudar para a branch dev:
 git checkout dev
Atualizar a branch dev:
 git pull origin dev
Fazer o merge da bugfix na dev:
 git merge bugfix/nome-da-branch
Enviar para o repositório remoto:
 git push origin dev
Excluir a branch bugfix (opcional, se não for mais necessária):
 git branch -d bugfix/nome-da-branch # Apaga a branch local
 git push origin --delete bugfix/nome-da-branch # Apaga a branch remota

////////////////////////////////// Merge da dev na main ////////////////////////////////////

Após a correção ser testada e validada na dev, podemos enviá-la para main:
Mudar para a branch main:
 git checkout main
Atualizar a branch main:
 git pull origin main
Fazer o merge da dev na main:
 git merge dev
Enviar para o repositório remoto:
 git push origin main

////////////////////////////////// Configurar Proteção de Branches ////////////////////////////////////

1. Vá em Settings > Branches
2. Em "Branch protection rules", clique em "Add branch protection rules"
3. Configure a proteção apenas para a branch main :
Branch name pattern: main
Marque "Require a pull request before merging"
Marque "Require approvals"
Marque "Do not allow bypassing the above settings"
Clique em "Create"

/////////////////////////////////////////////////////////////////
1. Criar uma Feature
1. Crie uma branch de feature:
git checkout -b feature/nome-da-branch
#P.S.: tenha sapiciência de escolher um nome para a sua branch
2. Crie o arquivo .github/workflows/github-ci.yml . O arquivo está disponível no AVA.
3. Faça commit das alterações:
git add .github/workflows/github-ci.yml
git commit -m "feat: adiciona workflow de CI"
git push -u origin feature/nome-da-branch

Criar Pull Request para dev
1. No GitHub, crie uma Pull Request (PR) da sua feature para a branch dev
2. Aguarde a aprovação do professor
3. Após a aprovação, o workflow irá:
Fazer merge automático para dev
Deletar a branch de feature

/////////////////////////// Criar uma Release //////////////////////////////////////

1. Crie uma branch de release (a partir da main):
git checkout -b release/1.0.0
2. Faça merge manual da dev na release:
git merge dev
3. Resolva possíveis conflitos e faça commit:
git add .
git commit -m "chore: merge dev into release"
git push -u origin release/1.0.0

Criar Pull Request para main
1. No GitHub, crie uma Pull Request (PR) da release para a branch main
2. Aguarde a aprovação do seu colega
3. Após a aprovação, o workflow irá:
Fazer merge automático para main
Criar uma tag e release
Fazer merge de main para dev
Deletar a branch de release

Após completar todos os passos, verifique se:
1. A branch dev contém o arquivo github-ci.yml
2. A branch main contém o arquivo github-ci.yml
3. Existe uma tag v1.0.0 no repositório
4. Existe uma release v1.0.0 no repositório


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SCRUM =>
- PO (Product Owner):
- Scrum Master:
- Devs:


- Dailys:
- Plannings:
- Reviews:
- Retrôs:

Sprint => 

Código bem escrito => 
- Clareza;
- Manutenabilidade;
- Documentação;
- Bem testado;
- Refatoração;
- Extensibilidade;
- Eficiência;

.
>>>>>>> f97feb4afa5c637d145545c841abd552ab5e9f6f
