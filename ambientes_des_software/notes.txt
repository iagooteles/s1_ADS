/////////// Aula 1 ///////////

Software:
- Web: 
- Mobile: 
- Cloud: 
- Embarcado: 

Software não é patentiável, ele recebe um registro;

Componentização => 'Quebrar' o código em partes menores para reproveitar o código e para evitar que ele tenha que ser escrito várias vezes e respeitar o princípio DRY - Don't Repeat Yourself -;


//////////////////////// Aula 2 //////////////////////

Seletores css:
- nativos/tag - Por tipo de tag;
- classe - Para todos que tiverem aquela classe;
- ID - Identificador único;

HTML => HyperText Markup Language => Definir a estrutura da página;
CSS => Cascading Style Sheets => Definir aparência;
JS => Definir funções, comandos e dinamismo da página;

Mobile first => Desenvolver o sistema/website pensando na estrutura de se criar o projeto mobile primeiro, sempre levando em consideração a responsividade;

Responsividade => Capacidade do sistema se adaptar para diferentes tamanhos de tela;

frameworks => É uma estrutura mais abrangente e geralmente mais opinativa, que fornece uma base para o desenvolvimento de um projeto. Ele dita a arquitetura do seu código e estabelece uma série de regras, convenções e padrões que o desenvolvedor deve seguir.

bibliotecas => É uma coleção de funções, métodos e recursos que o programador pode utilizar para realizar tarefas específicas em seu código. Ela oferece soluções para problemas comuns, como manipulação de strings, acesso a banco de dados, ou geração de gráficos.

Biblioteca: Você chama a biblioteca no seu código quando precisar de suas funcionalidades, controlando o fluxo.
Framework: O framework chama o seu código, controlando o fluxo e fornecendo uma estrutura predefinida que você segue.

Biblioteca é como um conjunto de ferramentas que você usa quando precisa delas.
Framework é como uma receita de bolo, onde você segue um passo a passo para conseguir o resultado final.


////////////// Des mobile ///////////////

Desenvolvimento nativos - 
    para desenvolver ANDROID nativo é necessário um ambiente com SDK e android studio, normalmente apps Android são desenvolvidos com Kotlin, mas já foram desenvolvidos com JAVA, o android studio gera um APK- executável - e é necessário AAB(android app bundle)- não executável - para colocar na loja;

    Para desenvolver IOS - só é possível com um MAC, sua linguagem padrão é SWIFT, ele já vem com IDE própria => XCODE; O artefato gerado aqui é o .ipa

    Benefícios do desenvolvimento nativo => 
        - maior desempenho;
        - Acesso direto aos recursos dos dispositivos (camera, gps, acelerômentro)
        - user experience: aproveitamento de recursos e padrões nativos.
        

Desenvolvimento híbrido - possibilita o desenvolvimento de um só código que vai ser compilado e distribuído para cada sistema operacional; Na hora do build, o código faz um build para IOS e outro para ANDROID;
    OBS: Você não precisa de um MAC para codificar, mas na hora do build é necessário um mac para gerar o arquivo .ipa

    ex: react native(javascript, typescript), flutter(dart), ionic;

    alguns modelos híbridos podem, ainda, além da forma nativa, trabalhar com modelo WEBVIEW que vai passar sua aplicação como se fosse uma espécie de browser que vai ler a aplicação como se fosse html, css, js;

BUILD => Processo de construção da aplicação;
Em termos gerais uma equipe que desenvolve hibridamente é mais barato que ter uma equipe que desenvolva nativo (a nativo teria que fazer dois códigos diferentes para o mesmo aplicativo);


Javascript é uma linguagem Fraca e Dinâmica (dinâmica pq na hora que o código for executado é que o tipo vai ser definido) ** revisar se isso ta certo mesmo;

Dinâmica => O tipo das variáveis são definidos no tempo de Execução; ex: js,  python, rubym php;
Estática => O tipo das variáveis são definidos no tempo de Compilação; ex: java, C++, swift, C#; 
Fraca => Permite fazer operações com tipos diferentes; ex: js, php, perl, C, Lua; 
Forte =>  Não permite fazer operações com tipos diferentes; ex: java, python, swift;

Compilação =>

//////////////////////////////////  ////////////////////////////////////

Paradigmas de programação => Cada paradigma fornece uma forma diferente de pensar sobre problemas comtacionais e estruturar soluções; Cada paradigma possui seus princípios, regras e técnicas;

- paradigma imperativo => um dos mais antigos;  baseia-se na execução de comandos seqüenciais; comandos que alteram o estado do sistema; Programas são escritos em uma série de instruções que devem ser executadas em ordem;
- paradigma funcional => avaliação de funções e dados mutáveis; É frequentemente utilizado para tratar de problemas matemáticos e processamento de listas; Um benefício imenso desse paradigma é deixar o software modular e reutilizável;
- paradigma declarativo => Permite que os usuários interagem com banco de dados relacionais; 
- paradigma orientado a objetos => Promove modularidade e reutilização; Organiza o software ao redor de objetos que são instanciados através de classes;
    - Abstração;
    - herança;
    - encapsulamento;
    - polimorfismo;

/////////////////////// GIT /////////////////////

Controle de versão => 

alpha => teste fechado;
1 . 0 . 0 => Versão Beta;
1 . 12 . 7

primero numero  - major => incompatibilidade; Rebirth; (Pode ser de mudanças de cunho arquitetural da aplicação, ou pode ser de cunho de negócios, por exemplo, uma nova interface.)
segundo numero  - minor => novas funcionalidades; Features;
terceiro número - patch => correção de bugs; Erros;

minor zera a patch;
major zera a minor e a patch;

Git flow => 

//////////////////////////////////  ////////////////////////////////////


